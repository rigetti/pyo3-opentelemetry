# Based on https://github.com/actions-rs/meta/blob/master/recipes/msrv.md

on: 
  push:
    branches: [main]
  pull_request: {}

name: Checks 

jobs:
  checks:
    name: Run Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]
        rust:
          - stable
          # the scripts seem to inevitably involve building something that requires a newer version
          # of rust, so we just run against stable for now.
          # - 1.60.0
    steps:
      # Checkout, setup Rust tools, etc.
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
      - name: Install cargo-make
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --debug cargo-make
      # For ci-flow, see the following:
      # https://github.com/sagiegurari/cargo-make/tree/master#predefined-flows
      # https://github.com/sagiegurari/cargo-make/blob/master/docs/cargo_make_task_list.md#ci
      - name: Run Rust CI
        uses: actions-rs/cargo@v1
        with:
          command: make
          args: --makefile Makefile.toml check-all 

      # Setup Python and run Python example
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: snok/install-poetry@v1
      - name: Run Python Example
        run: |
          cd ./examples/pyo3-opentelemetry-lib
          cargo make --makefile Makefile.toml python-check-all 

  macos_wheels:
    name: Test macOS universal2 wheel builds
    runs-on: macos-12
    env:
      CXXFLAGS: "-std=c++11 -stdlib=libc++"
    strategy:
      matrix:
        python-version: ['3.8']
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-apple-darwin
        profile: minimal
        default: true
    - name: Build wheels - universal2
      uses: messense/maturin-action@v1
      with:
        args: -i python --release --target universal2-apple-darwin --manifest-path examples/pyo3-opentelemetry-lib/Cargo.toml --out dist
    - name: Install wheel
      run: |
        pip install pyo3-opentelemetry-lib --find-links dist --force-reinstall

  linux_wheels:
    name: Test manylinux wheel builds
    runs-on: ubuntu-latest
    env:
      CXXFLAGS: "-std=c++11"
    strategy:
      matrix:
        python-version: ['3.8']
        target: [x86_64, aarch64]
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        default: true
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install protoc
      uses: arduino/setup-protoc@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        version: '3.20.1'
    - name: Build wheels
      uses: messense/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: -i ${{ matrix.python-version }} --release --manifest-path examples/pyo3-opentelemetry-lib/Cargo.toml --out dist
    - name: Install wheel
      # We use an x86_64 image to cross-compile a wheel for aarch64, so we can only easily test installing the x86_64 wheel.
      if: ${{matrix.target}} == x86_64
      run: |
        pip install pyo3-opentelemetry-lib --find-links dist --force-reinstall

  windows_wheels:
    name: Test Windows wheel builds
    runs-on: windows-latest
    strategy: 
      matrix: 
        python-version: ['3.8']
    steps: 
      - uses: actions/checkout@v3 
      - uses: actions/setup-python@v2 
        with: 
          python-version: ${{ matrix.python-version }} 
          architecture: ${{ matrix.target }} 
      - name: Update rustup 
        run: rustup self update 
      - name: Install Rust toolchain 
        uses: actions-rs/toolchain@v1 
        with: 
          toolchain: stable 
          target: x86_64-pc-windows-msvc 
          profile: minimal 
          default: true 
      - name: Build wheels 
        uses: messense/maturin-action@v1 
        with: 
          target: x64
          args: -i python --release --manifest-path examples/pyo3-opentelemetry-lib/Cargo.toml --out dist 
      - name: Install wheel 
        run: | 
          pip install pyo3-opentelemetry-lib --find-links dist --force-reinstall --no-deps --no-index
